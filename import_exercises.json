{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c759434e",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 1. Import and test 3 of the functions from your functions exercise file. Import each function in a different way:\n",
    "\n",
    "## a. Run an interactive python session and import the module. Call the is_vowel function using the . syntax.\n",
    "\n",
    "import function_exercises \n",
    "\n",
    "function_exercises.is_vowel('b')\n",
    "print(function_exercises.is_vowel('b'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "48ff9454",
   "metadata": {},
   "outputs": [],
   "source": [
    "## b. Create a file named import_exericses.py. Within this file, use from to import the calculate_tip function \n",
    "## directly. Call this function with values you choose and print the result.\n",
    "\n",
    "function_exercises.calculate_tip(100, .10)\n",
    "print(function_exercises.calculate_tip(100, .10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e10eee15",
   "metadata": {},
   "outputs": [],
   "source": [
    "## c. Create a jupyter notebook named import_exercises.ipynb. Use from to import the get_letter_grade function \n",
    "## and give it an alias. Test this function in your notebook.\n",
    "## DIDN'T FINISH get_letter_grade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b52cd51e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "## 2. Read about and use the itertools module from the python standard library to help you solve the following \n",
    "## problems:\n",
    "\n",
    "## a. How many different ways can you combine the letters from \"abc\" with the numbers 1, 2, and 3?\n",
    "# import itertools to use the permutations function\n",
    "# insert the exercise variables into the permutations function\n",
    "import itertools\n",
    "\n",
    "my_list = list(itertools.product('abc', '123'))\n",
    "len(my_list)\n",
    "print(len(my_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9cceae33",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "## b. How many different combinations are there of 2 letters from \"abcd\"?\n",
    "\n",
    "## import itertools to use combinations\n",
    "\n",
    "import itertools\n",
    "my_combinations = list(itertools.combinations('abcd', 2))\n",
    "len(my_combinations)\n",
    "print(len(my_combinations))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "972317f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n"
     ]
    }
   ],
   "source": [
    "## c. How many different permutations are there of 2 letters from \"abcd\"?\n",
    "\n",
    "# import permutations and apply it\n",
    "\n",
    "import itertools\n",
    "\n",
    "my_permutations = list(itertools.permutations('abcd', 2))\n",
    "len(my_permutations)\n",
    "print(len(my_permutations))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1839498d",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 3. Save this file as profiles.json inside of your exercises directory (right click -> save file as...).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "33bd71a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "data = json.load(open('profiles.json'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6923ed6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19\n"
     ]
    }
   ],
   "source": [
    "## A. Total number of users\n",
    "\n",
    "#[dict[key] for dict in list_of_dicts]\n",
    "\n",
    "number_of_users = len(data)\n",
    "print(number_of_users)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0a66d2db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "## B. Number of active users\n",
    "\n",
    "# retrieve the list of true's for 'isActive'\n",
    "# find the len of this list\n",
    "\n",
    "user_status =[individual['isActive'] for individual in data]\n",
    "active_user = user_status.count(True)\n",
    "print(active_user)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2adf4cee",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(user_status)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7ff41681",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "## C. Number of inactive users\n",
    "\n",
    "# retrieve list of false's for 'isActive'\n",
    "# find the len of this list\n",
    "\n",
    "inactive_user = user_status.count(False)\n",
    "\n",
    "print(inactive_user)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c8155e62",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['$2,097.02', '$3,654.02', '$1,536.02', '$3,919.64', '$3,681.39', '$1,694.42', '$1,214.10', '$2,930.31', '$1,944.15', '$2,839.22', '$2,467.31', '$3,304.99', '$3,844.42', '$3,594.99', '$2,940.24', '$3,062.41', '$3,067.82', '$2,646.76', '$2,227.79']\n"
     ]
    }
   ],
   "source": [
    "## D. Grand total of balances for all users\n",
    "\n",
    "# retrieve the individual balance for each user\n",
    "# convert string to integer\n",
    "# add together the balances to find the total\n",
    "\n",
    "indiv_balance = [individual['balance'] for individual in data]\n",
    "print(indiv_balance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "46752c8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "False\n",
      "True\n",
      "Lala\n",
      "1.0\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'total' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-8c836f4b3a4a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# remove commas\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mfunction_exercises\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mhandle_commas\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunction_exercises\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle_commas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindiv_balance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/codeup-data-science/python-exercises/function_exercises.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     73\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtotal\u001b[0m                                            \u001b[0;31m# total equals the sticker_price multiplied by the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtotal\u001b[0m\u001b[0;34m)\u001b[0m                                                       \u001b[0;31m# discount_value all subtracted from the sticker_price\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m \u001b[0;31m#%%\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0;31m## 7. Define a function named handle_commas. It should accept a string that is a number that contains commas\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'total' is not defined"
     ]
    }
   ],
   "source": [
    "# remove dollar signs\n",
    "# remove commas\n",
    "\n",
    "from function_exercises import handle_commas\n",
    "\n",
    "print(function_exercises.handle_commas(indiv_balance))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a483ec3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
